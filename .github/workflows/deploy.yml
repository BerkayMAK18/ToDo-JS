name: Deploy to GitHub Pages

# Trigger the workflow when you push to main branch
on:
  push:
    branches: [ main ]
  # Allow manual triggering from GitHub UI
  workflow_dispatch:

# Set permissions for GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    # Use Ubuntu as the runner
    runs-on: ubuntu-latest
    
    # Configure GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    # Step 1: Download your repository code
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # Step 2: Replace placeholders with actual API keys
    - name: Replace Firebase configuration
      run: |
        echo "Replacing Firebase config placeholders..."
        sed -i 's/PLACEHOLDER_API_KEY/${{ secrets.FIREBASE_API_KEY }}/g' script.js
        sed -i 's/PLACEHOLDER_AUTH_DOMAIN/${{ secrets.FIREBASE_AUTH_DOMAIN }}/g' script.js
        sed -i 's/PLACEHOLDER_PROJECT_ID/${{ secrets.FIREBASE_PROJECT_ID }}/g' script.js
        sed -i 's/PLACEHOLDER_STORAGE_BUCKET/${{ secrets.FIREBASE_STORAGE_BUCKET }}/g' script.js
        sed -i 's/PLACEHOLDER_MESSAGING_SENDER_ID/${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}/g' script.js
        sed -i 's/PLACEHOLDER_APP_ID/${{ secrets.FIREBASE_APP_ID }}/g' script.js
        sed -i 's/PLACEHOLDER_MEASUREMENT_ID/${{ secrets.FIREBASE_MEASUREMENT_ID }}/g' script.js
        echo "Firebase config replacement completed!"
    
    # Step 3: Setup GitHub Pages
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    # Step 4: Upload the files
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'
    
    # Step 5: Deploy to GitHub Pages
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4